  #QUESTION1
  x <- c(1,2,-3,4)
if(all(x>0)){
    print("All Positives")
  } else{
     print("Not All Positives")
  } #resultado Not All Positives
  
  #QUESTION2
  #all(!x)
  
  #QUESTION3
  # Assign the state abbreviation when the state name is longer than 8 characters 
new_names <- ifelse(nchar(murders$state)>8, murders$abb, murders$state)

#QUESTION4
# Create function called `sum_n`
sum_n <- function(n){
  y <- 1:n
  sum(y)
}
# Use the function to determine the sum of integers from 1 to 5000
sum_n(5000)

#QUESTION5
# Create `altman_plot` 
altman_plot <- function(x,y){
  plot(x+y, y-x)
}

#QUESTION6
# Print the value of x 
print(x)

#QUESTION7
# Write a function compute_s_n with argument n that for any given n computes the sum of 1 + 2^2 + ...+ n^2
compute_s_n <- function(n){
  y <- 1:n
  sum(y^2)
}

# Report the value of the sum when n=10
compute_s_n(10)

#QUESTION8
# Define a function and store it in `compute_s_n`
compute_s_n <- function(n){
  x <- 1:n
  sum(x^2)
}

# Create a vector for storing results
s_n <- vector("numeric", 25)

# write a for-loop to store the results in s_n
for(i in 1:25){
  s_n[i] <- compute_s_n(i)
}

#QUESTION9
# Define the function
compute_s_n <- function(n){
  x <- 1:n
  sum(x^2)
}

# Define the vector of n
n <- 1:25

# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
  s_n[i] <- compute_s_n(i)
}

#  Create the plot 
plot(n, s_n)

#QUESTION10
# Check that s_n is identical to the formula given in the instructions.
n<2
identical(s_n[2], n*(n+1)*(2*n+1)/6)
